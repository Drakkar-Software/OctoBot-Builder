notifications:
  email: false
language: bash
dist: bionic
services:
  - docker
env:
  global:
    - DOCKER_CLI_EXPERIMENTAL=enabled
    - BUILDX_VERSION=v0.3.1
    - VERSION=$TRAVIS_BRANCH # TODO use latest except for tags
    - DOCKER_FILE=Dockerfile

docker_buildx: &docker_buildx
      stage: build
      name: "Docker buildx platform"
      os: linux
      language: shell
      before_install:
        - sudo rm -rf /var/lib/apt/lists/*
        - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        - lsb_release -cs
        - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge"
        - sudo apt-get update
        - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
        - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      install:
        - docker version
        - git clone https://github.com/$GITHUB_REPOSITORY -b $PROJECT_BRANCH && cd $GITHUB_PROJECT
      before_script:
        - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
        - mkdir -vp ~/.docker/cli-plugins/ ~/dockercache
        - curl --silent -L "https://github.com/docker/buildx/releases/download/$BUILDX_VERSION/buildx-$BUILDX_VERSION.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
        - chmod a+x ~/.docker/cli-plugins/docker-buildx
      script:
        - docker buildx create --use
        - travis_wait 60 docker buildx build -f $DOCKER_FILE --push --platform $PLATFORMS -t $IMAGE_NAME:$VERSION .

docker_build: &docker_build
      stage: build
      name: "Docker build platform"
      os: linux
      language: shell
      install:
        - docker version
        - git clone https://github.com/$GITHUB_REPOSITORY -b $TRAVIS_BRANCH && cd $GITHUB_PROJECT
      before_script:
        - echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin
      script:
        - docker build -f $DOCKER_FILE -t $IMAGE_NAME:$VERSION .
        - docker push $IMAGE_NAME:$VERSION

jobs:
  include:
    - <<: *docker_buildx
      name: "Buildx - OctoBot"
      env:
        - PLATFORMS="linux/386,linux/amd64,linux/arm64/v8"
        - GITHUB_REPOSITORY="Drakkar-Software/OctoBot"
        - GITHUB_PROJECT="OctoBot"
        - PROJECT_BRANCH="0.4.0"
        - IMAGE_NAME="drakkarsoftware/octobot"
        - VERSION="0.4.0"
#    - <<: *docker_buildx
#      name: "Buildx - OctoBot-Builder"
#      env:
#        - PLATFORMS="linux/386,linux/amd64,linux/arm/v7,linux/arm64/v8"
#        - GITHUB_REPOSITORY="Drakkar-Software/OctoBot-Builder"
#        - GITHUB_PROJECT="OctoBot-Builder/pypi"
#        - PROJECT_BRANCH="master"
#        - IMAGE_NAME="drakkarsoftware/pypi-builder"
#        - DOCKER_FILE="builder/Dockerfile"
    - <<: *docker_build
      name: "Build - OctoBot-Builder - manylinux - i686"
      env:
        - GITHUB_REPOSITORY="Drakkar-Software/OctoBot-Builder"
        - GITHUB_PROJECT="OctoBot-Builder/pypi"
        - IMAGE_NAME="drakkarsoftware/pypi-builder"
        - VERSION="manylinux-i686"
        - DOCKER_FILE="manylinux/i686/Dockerfile"
    - <<: *docker_build
      name: "Build - OctoBot-Builder - manylinux - x86_64"
      env:
        - GITHUB_REPOSITORY="Drakkar-Software/OctoBot-Builder"
        - GITHUB_PROJECT="OctoBot-Builder/pypi"
        - IMAGE_NAME="drakkarsoftware/pypi-builder"
        - VERSION="manylinux-x86_64"
        - DOCKER_FILE="manylinux/x86_64/Dockerfile"
    - <<: *docker_build
      name: "Build - OctoBot-Builder - manylinux - aarch64"
      arch: arm64
      env:
        - GITHUB_REPOSITORY="Drakkar-Software/OctoBot-Builder"
        - GITHUB_PROJECT="OctoBot-Builder/pypi"
        - IMAGE_NAME="drakkarsoftware/pypi-builder"
        - VERSION="manylinux-aarch64"
        - DOCKER_FILE="manylinux/aarch64/Dockerfile"
    - <<: *docker_build
      name: "Build - OctoBot-Builder - stdeb"
      env:
        - GITHUB_REPOSITORY="Drakkar-Software/OctoBot-Builder"
        - GITHUB_PROJECT="OctoBot-Builder/pypi"
        - IMAGE_NAME="drakkarsoftware/pypi-builder"
        - VERSION="stdeb"
        - DOCKER_FILE="stdeb/Dockerfile"
